// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::drivetrainLeftMtr;
std::shared_ptr<SpeedController> RobotMap::drivetrainRightMtr;
std::shared_ptr<RobotDrive> RobotMap::drivetrainRobotDrive2;
std::shared_ptr<Encoder> RobotMap::drivetrainDriveLeftEncoder;
std::shared_ptr<Encoder> RobotMap::drivetrainDriveRightEncoder;
std::shared_ptr<AnalogGyro> RobotMap::drivetrainGyroA;
std::shared_ptr<AnalogInput> RobotMap::drivetrainMaxSonar;
std::shared_ptr<AnalogInput> RobotMap::drivetrainProxSensor;
std::shared_ptr<SpeedController> RobotMap::liftSysLiftMtr;
std::shared_ptr<Encoder> RobotMap::liftSysLiftEncoder;
std::shared_ptr<DigitalInput> RobotMap::liftSysLiftUpLmtSw;
std::shared_ptr<DigitalInput> RobotMap::liftSysLiftLoLmtSw;
std::shared_ptr<AnalogInput> RobotMap::liftSysLiftPot;
std::shared_ptr<SpeedController> RobotMap::shooterSysShooterFrontMtr;
std::shared_ptr<SpeedController> RobotMap::shooterSysShooterRearMtr;
std::shared_ptr<DigitalInput> RobotMap::shooterSysShooterContactSw;
std::shared_ptr<Relay> RobotMap::shooterSysCaptureLeftSpike;
std::shared_ptr<Relay> RobotMap::shooterSysCaptureRightSpike;
std::shared_ptr<Relay> RobotMap::lEDRingSysLEDSpike;
std::shared_ptr<Relay> RobotMap::smartdashRobotLightsSpike;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    drivetrainLeftMtr.reset(new Talon(0));
    lw->AddActuator("Drivetrain", "LeftMtr", std::static_pointer_cast<Talon>(drivetrainLeftMtr));
    
    drivetrainRightMtr.reset(new Talon(1));
    lw->AddActuator("Drivetrain", "RightMtr", std::static_pointer_cast<Talon>(drivetrainRightMtr));
    
    drivetrainRobotDrive2.reset(new RobotDrive(drivetrainLeftMtr, drivetrainRightMtr));
    
    drivetrainRobotDrive2->SetSafetyEnabled(true);
        drivetrainRobotDrive2->SetExpiration(0.1);
        drivetrainRobotDrive2->SetSensitivity(0.5);
        drivetrainRobotDrive2->SetMaxOutput(1.0);

    drivetrainDriveLeftEncoder.reset(new Encoder(0, 1, false, Encoder::k4X));
    lw->AddSensor("Drivetrain", "DriveLeftEncoder", drivetrainDriveLeftEncoder);
    drivetrainDriveLeftEncoder->SetDistancePerPulse(1.0);
    drivetrainDriveLeftEncoder->SetPIDSourceType(PIDSourceType::kRate);
    drivetrainDriveRightEncoder.reset(new Encoder(2, 3, false, Encoder::k4X));
    lw->AddSensor("Drivetrain", "DriveRightEncoder", drivetrainDriveRightEncoder);
    drivetrainDriveRightEncoder->SetDistancePerPulse(1.0);
    drivetrainDriveRightEncoder->SetPIDSourceType(PIDSourceType::kRate);
    drivetrainGyroA.reset(new AnalogGyro(0));
    lw->AddSensor("Drivetrain", "GyroA", drivetrainGyroA);
    drivetrainGyroA->SetSensitivity(0.007);
    drivetrainMaxSonar.reset(new AnalogInput(3));
    lw->AddSensor("Drivetrain", "MaxSonar", drivetrainMaxSonar);
    
    drivetrainProxSensor.reset(new AnalogInput(1));
    lw->AddSensor("Drivetrain", "ProxSensor", drivetrainProxSensor);
    
    liftSysLiftMtr.reset(new Talon(2));
    lw->AddActuator("LiftSys", "LiftMtr", std::static_pointer_cast<Talon>(liftSysLiftMtr));
    
    liftSysLiftEncoder.reset(new Encoder(4, 5, false, Encoder::k4X));
    lw->AddSensor("LiftSys", "LiftEncoder", liftSysLiftEncoder);
    liftSysLiftEncoder->SetDistancePerPulse(1.0);
    liftSysLiftEncoder->SetPIDSourceType(PIDSourceType::kRate);
    liftSysLiftUpLmtSw.reset(new DigitalInput(6));
    lw->AddSensor("LiftSys", "LiftUpLmtSw", liftSysLiftUpLmtSw);
    
    liftSysLiftLoLmtSw.reset(new DigitalInput(7));
    lw->AddSensor("LiftSys", "LiftLoLmtSw", liftSysLiftLoLmtSw);
    
    liftSysLiftPot.reset(new AnalogInput(2));
    lw->AddSensor("LiftSys", "LiftPot", liftSysLiftPot);
    
    shooterSysShooterFrontMtr.reset(new Talon(3));
    lw->AddActuator("ShooterSys", "ShooterFrontMtr", std::static_pointer_cast<Talon>(shooterSysShooterFrontMtr));
    
    shooterSysShooterRearMtr.reset(new Talon(4));
    lw->AddActuator("ShooterSys", "ShooterRearMtr", std::static_pointer_cast<Talon>(shooterSysShooterRearMtr));
    
    shooterSysShooterContactSw.reset(new DigitalInput(8));
    lw->AddSensor("ShooterSys", "ShooterContactSw", shooterSysShooterContactSw);
    
    shooterSysCaptureLeftSpike.reset(new Relay(2));
    lw->AddActuator("ShooterSys", "CaptureLeftSpike", shooterSysCaptureLeftSpike);
    
    shooterSysCaptureRightSpike.reset(new Relay(3));
    lw->AddActuator("ShooterSys", "CaptureRightSpike", shooterSysCaptureRightSpike);
    
    lEDRingSysLEDSpike.reset(new Relay(0));
    lw->AddActuator("LEDRingSys", "LEDSpike", lEDRingSysLEDSpike);
    
    smartdashRobotLightsSpike.reset(new Relay(1));
    lw->AddActuator("Smartdash", "RobotLightsSpike", smartdashRobotLightsSpike);
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
