// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "LiftByJoystick.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

LiftByJoystick::LiftByJoystick(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::liftSys.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void LiftByJoystick::Initialize() {
	// Robot::liftSys->ZeroBeginEndValues();
	// Robot::liftSys->PostBeginValues();
}

// Called repeatedly when this Command is scheduled to run
void LiftByJoystick::Execute() {

	Robot::liftSys->LiftByJoystick(Robot::oi->getShooterJoystick());

	// Robot::liftSys->PostCurrValues();
	// ------------ Calibration data display ----------------------------
	//if (Robot::oi->getShooterJoystick()->GetRawButton(kPrintBtn) == true){
	//	printf("Pot-Angle= %4.2f   Lift-Enc :%6.0f   Pot-Value :%6.4f\n",
	//			Robot::liftSys->GetLiftAngleByPot(),
	//			Robot::liftSys->GetLiftEncoder(),
	//			Robot::liftSys->GetLiftPotValue());
	//}
}


// Make this return true when this Command no longer needs to run execute()
bool LiftByJoystick::IsFinished() {
	Robot::liftSys->DisplaySmartdashValues();
    return false;
}

// Called once after isFinished returns true
void LiftByJoystick::End() {
	// Robot::liftSys->PostEndValues();
	Robot::liftSys->DisplaySmartdashValues();

	Robot::liftSys->LiftMtrStop();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void LiftByJoystick::Interrupted() {
	End();
}
