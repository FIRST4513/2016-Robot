// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "VisionOffsetsResetCmd.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

VisionOffsetsResetCmd::VisionOffsetsResetCmd(int mode): Command() {
    m_mode = mode;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void VisionOffsetsResetCmd::Initialize() {

	netTable = NetworkTable::GetTable("Preferences");		// point to preferences table

	if (netTable->ContainsKey("TgtHt"))
		targetHt = netTable->GetNumber("TgtHt",94);

	if (m_mode == 0){
		// ------------------- Reset values to 0 , 0 (inches) --------------------
		xOffset = 0;
		yOffset = 0;
		netTable->PutNumber("xOffset", xOffset);
		netTable->PutNumber("yOffset", yOffset);
		Robot::visionSys->SetOffsets(xOffset ,yOffset , targetHt);			// Set x & Y Offsets to zero
	}
	else
	{	// --------------- get default vaslues from preferences --------------
		if (netTable->ContainsKey("xOffset"))
			xOffset = netTable->GetNumber("xOffset", 0.0);
		if (netTable->ContainsKey("yOffset"))
			yOffset = netTable->GetNumber("yOffset", 0.0);
		// ----------- Post values to vision subsystem ------------------------
		Robot::visionSys->SetOffsets(xOffset ,yOffset , targetHt);			// Set x & Y Offsets to zero
	}
}

// Called repeatedly when this Command is scheduled to run
void VisionOffsetsResetCmd::Execute() {

}

// Make this return true when this Command no longer needs to run execute()
bool VisionOffsetsResetCmd::IsFinished() {
    return true;
}

// Called once after isFinished returns true
void VisionOffsetsResetCmd::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void VisionOffsetsResetCmd::Interrupted() {

}
