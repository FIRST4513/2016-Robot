// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ShooterPushBallFwdCmd.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

ShooterPushBallFwdCmd::ShooterPushBallFwdCmd(int Mode): Command() {
    m_Mode = Mode;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooterSys.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void ShooterPushBallFwdCmd::Initialize() {

	if (Robot::shooterSys->GetSpeedFlag() == true){		// shooter IS up to speed
		upToSpeedFlag = 1;	// we WERE up to speed good to shoot
		SetTimeout(1.5); // these 1.5 seconds are to fire the ball out and shutdown motors
		if (m_Mode == 0)	// continue front motors at shoot speed
			Robot::shooterSys->DriveFrontMtr(Robot::shooterSys->kShootHiGoalSpeed);
		else
			Robot::shooterSys->DriveFrontMtr(Robot::shooterSys->kShootLowGoalSpeed);

		Robot::shooterSys->DriveRearMtr(Robot::shooterSys->kPushBallIntoShooterSpeed);
	}
	else{
		upToSpeedFlag = 0;  // We ARE NOT up to speed we need to get there first
		SpinUpTmr.Reset();
		SpinUpTmr.Start();
		//SetTimeout(5.5);		// were going to wait 3.0 seconds for spin up and 1.5 seconds to push fwd
		Robot::shooterSys->DriveRearMtr(Robot::shooterSys->kHoldBallSpeed);
		if (m_Mode == 0){
			SetTimeout(4.0);		// were going to wait 3.0 seconds for spin up and 1.5 seconds to push fwd
			Robot::shooterSys->DriveFrontMtr(Robot::shooterSys->kShootHiGoalSpeed);
		}
		else{
			SetTimeout(4.0);		// were going to wait 3.0 seconds for spin up and 1.5 seconds to push fwd
			Robot::shooterSys->DriveFrontMtr(Robot::shooterSys->kShootLowGoalSpeed);
		}
	}
}

// Called repeatedly when this Command is scheduled to run
void ShooterPushBallFwdCmd::Execute() {
	Robot::shooterSys->DisplaySmartdashValues();
}

// Make this return true when this Command no longer needs to run execute()
bool ShooterPushBallFwdCmd::IsFinished() {
	if (upToSpeedFlag == 0){		// We are waiting for speed up of shooting motors
		if ((m_Mode == 0)&& (SpinUpTmr.Get() > 3.0)) Robot::shooterSys->DriveRearMtr(Robot::shooterSys->kPushBallIntoShooterSpeed);
		if ((m_Mode != 0)&& (SpinUpTmr.Get() > 1.5)) Robot::shooterSys->DriveRearMtr(Robot::shooterSys->kPushBallIntoShooterSpeed);
	}
	return (IsTimedOut());
}

// Called once after isFinished returns true
void ShooterPushBallFwdCmd::End() {
	Robot::shooterSys->StopMtrs();				// so stop motors and clear speedflag
	Robot::shooterSys->SetSpeedFlag(false);
	Robot::shooterSys->SetShooterSpeed(Robot::shooterSys->kShootHiGoalSpeed);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ShooterPushBallFwdCmd::Interrupted() {
	End();
}
