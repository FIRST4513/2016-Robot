// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef PROCCESSVISIONDATA_H
#define PROCCESSVISIONDATA_H


#include "Commands/Subsystem.h"
#include "../Robot.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class ProccessVisionData: public Command {
public:
	typedef struct TestPrefs{
		bool VTestFlag, VTestBall;
		float VTestMinX, VTestMinY, VTestMaxX, VTestMaxY, VTestDist, VTestRun, VTestAngle, VTestHdg;
	} TestPref;

	TestPref testData;

	typedef struct ImageSpecs{
		float imageWidth, imageHeight, imageFOV;
	} ImageSpec;

    ImageSpec cameraSpec;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	ProccessVisionData();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

	virtual void Initialize();
	virtual void Execute();
	virtual bool IsFinished();
	virtual void End();
	virtual void Interrupted();

	// *******************************************************************************
	// *                        User Methods
	// *******************************************************************************

	// ----------------- Init Methods -----------------------------
	void GetCameraPrefs();
	void GetTestData();

	// ----------------- Main Loop Routines -----------------------

	void GetCurrRobotData();
	void GetTargetData();
	void ProcessTargetData();
	void CalcShooterPosBasedOnDistance();

	void PostDataToRoborealm();
	void PostDataToAutoAim();		// maybe use netables for this interprocess communication
	void DisplaySmartdashValues();


	// ------------------ Roborealm Update routines -------------------------------
	void PostTargetCrosshair(float Xctr, float Yctr);
	void PostShooterCrosshair(float Xctr, float Yctr, float lineLen, float distance);

	// ------------- Conversion Utility Routines ----------------------
	float ConvertInchOffsetAtDistanceToAngle(float dist, float offset);
	float ConvertImageAngleToPixelCnt(float angle, float ctr);
	float ConvertImagePosToAngle(float pos, float ctr);
	float CnvrtDegToRad(float degree);
	float CnvrtRadToDeg(float radian);
	float Round(float value, int digits);

	// ---------------- SmartDashboard Updates ------------------------
	void DisplaySmartdashSimple();


private:
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLES


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLES


	// **********************************************************************************
	// *****                User Variables                                           ****
	// **********************************************************************************

	std::shared_ptr<NetworkTable> netTable;			// NetTables to talk to RoboRealm
	std::vector<std::string> keys;

	const float DEGREETORADIANCONST = 0.0174533;	// Degrees * Constant = Radians
	const float RADIANSTODEGREECONST = 57.295791;	// Constant / Radians = Degrees
	const float DEFAULTDIST = 130.16;				// Distane from wall to camera diag
	const float DEFAULTRUN = 109.5;					// Distane from wall to hinge
	const float TgtHt = 92.0;						// Target ht above robot hinge 3" off ground
	const float YCAMERAERRORANGLE = -0.96976;		// (-) = camera ctr indicated below actual ctr, (+) = above ctr
	const float XCAMERAERRORANGLE = -1.04434;		// (-) = camera ctr indicated left actual ctr, (+) = right ctr

	int processVisionCnt;
	bool autoAimFlag;
	float tempAngleA, tempSideB, tempAngleC, cameraRun, cameraRise;	// temporary working variables for intermediate calculations
	float turnAngle;

	// -------------------- Camera/System Preferences -----------------------
	float imageWidth, imageHeight, imageFOV;		// Camera Constants
	float imageCtrXpos, imageCtrYpos, ImageAngleConversionFactor;	// Calculated variables
	float shooterInchesXoffset;						// Inches the center of camera is off shooter ctr X
	float shooterInchesYoffset;						// Inches the center of camera is off shooter ctr Y
	float TARGETHT=94;								// target ctr is 94 inches above floor

	// ---------------------- Target Information From RoboRealm ----------------
	float targetXmin, targetXmax, targetYmin, targetYmax;
	float targetWidth, targetHt, targetAspectRatio;
	float targetYcog, targetDensity;

	bool validTargetFlag;							// true -> We have a valid target in view
	//float targetXctr,targetYctr;					// Ctrs = 0's if no target in view


	// ------------------ Robot Current Info ---------------------
	float currHdg;									// Gyro current heading
	float currLiftAngle;							// Lift angle of inclination


	// ------------------ Target Crosshair for display ---------------------
	float targetLineLen = 40;
	float targetCtrX, targetCtrY, targetRadius;
	float targetHLineX1, targetHLineY1,  targetHLineX2, targetHLineY2;
	float targetVLineX1, targetVLineY1, targetVLineX2, targetVLineY2;


	// ----------------Robot Shooter Crosshair for display ---------------
	float shooterLineLen = 60;
	float shooterCtrX, shooterCtrY, shooterRadius;
	float shooterHLineX1, shooterHLineY1,  shooterHLineX2, shooterHLineY2;
	float shooterVLineX1, shooterVLineY1, shooterVLineX2, shooterVLineY2;


	// ------ Variables used in calculating target location ---------------------
	float run;										// temp variable to hold run distance to wall
	float adjShooterHdg;							// Temp variable for adjusted heading
	float adjShooterAngle;							// Temp variable for adjusted angle
	float shooterCtrXoffsetAngle, shooterCtrYoffsetAngle;	// offset from center of image
	float targetCtrXpos, targetCtrYpos;
	float idealShootAngle, projectedTgtAngle, feet, shooterOffsetYAngle;
	float XoffsetAngle, YoffsetAngle;
	float CameraToGroundAngle, feetRun;

	float GAE,BD,CED,EG,AG,DF,EF,ED,AB,ABft,AD,GAE2,EG2,AG2,DF2,EF2,FED2,CED2,BC2,YCTR;
	float X_AB,X_FCB,X_AD,X_DC,X_AC,X_ACD,X_ACE,X_AE,X_EAB,X_DAB,X_DG,X_FCG,X_FG,XCTR;

	//	float shooterCtrXpos,  shooterCtrYpos;
	//	float shooterXoffset, shooterYoffset;
	//	float targetXctrAngle, targetYctrAngle;
	//	float imageXctr, imageYctr;
	//	float targetXoffset, targetYoffset;


	// ------------------- Calculation Results -------------------
	float targetDist;								// Calculated Distance based on Lift Angle
	float targetXangle;								// Angle X of target relative to center of the screen image
	float targetYangle;								// Angle Y of target relative to center of the screen image
	float deltaXangle;								// Change in heading needed from current hdg to hit target
	float deltaYangle;								// Change in Lift angle to hit target from current angle
	float finalshooterHdg;							// Heading the robot should take to hit target
	float finalshooterAngle ;							// Angle the shooter should raise to to hit target
	float deltaShooterToTargetXangle;
	float deltaShooterToTargetYangle;				// diff in degrees between shooter and ctr of image
};

#endif
