// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ShooterSpinUpCmd.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

ShooterSpinUpCmd::ShooterSpinUpCmd(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooterSys.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void ShooterSpinUpCmd::Initialize() {

	SetTimeout(3.0);				// set timeout to 3.0 sec
	Robot::shooterSys->DriveFrontMtr(Robot::shooterSys->GetShooterSpeed());
	Robot::shooterSys->DriveRearMtr(Robot::shooterSys->kHoldBallSpeed);
	Robot::shooterSys->SetSpeedFlag(false);		// were just starting not at speeed yet at Timeout we will be there
}

// Called repeatedly when this Command is scheduled to run
void ShooterSpinUpCmd::Execute() {
	Robot::shooterSys->DisplaySmartdashValues();
}

// Make this return true when this Command no longer needs to run execute()
bool ShooterSpinUpCmd::IsFinished() {

	if (IsTimedOut() == true){
		Robot::shooterSys->SetSpeedFlag(true); // were at speed now .. This is the only time this gets set true !!!!
		return true;
	}
	return false;
}

// Called once after isFinished returns true
void ShooterSpinUpCmd::End() {
	// we don't stop the motors let them run till fired
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ShooterSpinUpCmd::Interrupted() {
	End();
}
