// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"
#include "Commands/AutoToDefenseCmdGrp.h"
#include "Commands/AutoThroughDefenseCmdGrp.h"
#include "Commands/AutoSetupShootHighGoalCmdGrp.h"
#include "Commands/AutoShootHighGoalCmdGrp.h"
#include "Commands/AutoDoNothingCmd.h"
#include "Commands/LiftTo10CmdGrp.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<Drivetrain> Robot::drivetrain;
std::shared_ptr<LiftSys> Robot::liftSys;
std::shared_ptr<ShooterSys> Robot::shooterSys;
std::shared_ptr<VisionSys> Robot::visionSys;
std::shared_ptr<LEDRingSys> Robot::lEDRingSys;
std::shared_ptr<Smartdash> Robot::smartdash;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    drivetrain.reset(new Drivetrain());
    liftSys.reset(new LiftSys());
    shooterSys.reset(new ShooterSys());
    visionSys.reset(new VisionSys());
    lEDRingSys.reset(new LEDRingSys());
    smartdash.reset(new Smartdash());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());


	// instantiate the command used for the autonomous period

	//autoChooser = new SendableChooser();

	autoChooser.AddDefault("auto DoNothing", new AutoDoNothingCmd());
	autoChooser.AddObject("Drive To Defense", new AutoToDefenseCmdGrp());
	autoChooser.AddObject("Drive Through Defense", new AutoThroughDefenseCmdGrp());
	autoChooser.AddObject("Drive Through and Setup for Shot", new AutoSetupShootHighGoalCmdGrp());
	autoChooser.AddObject("Drive Through and Shoot High Goal", new AutoShootHighGoalCmdGrp());
	frc::SmartDashboard::PutData("Auto Mode", &autoChooser);

	// ---------------- User Initialize Code for Robot -------------------
	UserInit();
	// --------------------------------------------------------------
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	autoCmd.reset(autoChooser.GetSelected());
	if(autoCmd.get() != nullptr){
		autoCmd->Start();
	}

//	Command* autoCommand = (Command*)autoChooser->GetSelected();
//	if (autoCommand != nullptr){
//		autoCommand->Start();
//	}
}

void Robot::AutonomousPeriodic() {
	frc::Scheduler::GetInstance()->Run();

}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autoCmd.get() != nullptr)
		autoCmd->Cancel();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TestPeriodic() {
	lw->Run();
}

// ******************************************************************************
// *****                     User Initialize Method                          ****
// ******************************************************************************
void Robot::UserInit(){
//	NetworkTable::SetServerMode();
	netTable = NetworkTable::GetTable("Preferences");		// point to preferences table

	// -------------- Get Target Height (inches) ----------------
	if (netTable->ContainsKey("TgtHt")){
		TARGETHT = netTable->GetNumber("TgtHt",TARGETHT);
	}
	else{
		netTable->PutNumber("TgtHt",TARGETHT);
	}

	// ------------------- Get X Offset (inches) --------------------
	if (netTable->ContainsKey("xOffset"))
		shooterInchesXoffset = netTable->GetNumber("xOffset", shooterInchesXoffset);
	else
		netTable->PutNumber("xOffset", shooterInchesXoffset);

	// ---------------- Get Y Offset (inches) --------------------
	if (netTable->ContainsKey("yOffset"))
		shooterInchesYoffset = netTable->GetNumber("yOffset", shooterInchesYoffset);
	else
		netTable->PutNumber("yOffset", shooterInchesYoffset);

	// -------------- Image Width (Pixels) ----------------
	if (netTable->ContainsKey("ImgWidth"))
		imageWidth = netTable->GetNumber("ImgWidth", imageWidth);
	else
		netTable->PutNumber("ImgWidth", imageWidth);

	// -------------- Image Height (pixels) ----------------
	if (netTable->ContainsKey("ImgHt"))
		imageHeight = netTable->GetNumber("ImgHt",imageHeight);
	else
		netTable->PutNumber("ImgHt",imageHeight);

	// -------------- Image FOV (degrees) ----------------
	if (netTable->ContainsKey("ImgFOV"))
		imageFOV = netTable->GetNumber("ImgFOV",imageFOV);
	else
		netTable->PutNumber("imgFOV",imageFOV);

	// *************************************************************
	// ------------------- Get Vision Test Data --------------------
	// *************************************************************

	// ------------- Test Flag --------------
	if (netTable->ContainsKey("VTestFlag"))
		VTestFlag = netTable->GetBoolean("VTestFlag",VTestFlag);
	else
		netTable->PutBoolean("VTestFlag",VTestFlag);

	// ------------- Min X --------------
	if (netTable->ContainsKey("VTestMinX"))
		VTestMinX = netTable->GetNumber("VTestMinX",VTestMinX);
	else
		netTable->PutNumber("VTestMinX",VTestMinX);

	// ------------- Min Y ---------------
	if (netTable->ContainsKey("VTestMinY"))
		VTestMinY = netTable->GetNumber("VTestMinY",VTestMinY);
	else
		netTable->PutNumber("VTestMinY",VTestMinY);

	// ------------- Max X --------------
	if (netTable->ContainsKey("VTestMaxX"))
		VTestMaxX = netTable->GetNumber("VTestMaxX",VTestMaxX);
	else
		netTable->PutNumber("VTestMaxX",VTestMaxX);

	// ------------- Max Y --------------
	if (netTable->ContainsKey("VTestMaxY"))
		VTestMaxY = netTable->GetNumber("VTestMaxY",VTestMaxY);
	else
		netTable->PutNumber("VTestMaxY",VTestMaxY);

	// ------------- Test Distance --------------
	if (netTable->ContainsKey("VTestDist"))
		VTestDist = netTable->GetNumber("VTestDist",VTestDist);
	else
		netTable->PutNumber("VTestDist",VTestDist);


	// ------------- Test Run Distance --------------
	if (netTable->ContainsKey("VTestRun"))
		VTestRun = netTable->GetNumber("VTestRun",VTestRun);
	else
		netTable->PutNumber("VTestRun",VTestRun);


	// ------------ Ball captured flag ---------------
	if (netTable->ContainsKey("VTestBall"))
		VTestBall = netTable->GetBoolean("VTestBall",VTestBall);
	else
		netTable->PutBoolean("VTestBall",VTestBall);


	// ------------ Shooter Angle ---------------
	if (netTable->ContainsKey("VTestShooterAngle"))
		VTestAngle = netTable->GetNumber("VTestShooterAngle",VTestAngle);
	else
		netTable->PutNumber("VTestShooterAngle",VTestAngle);

	// ------------ Test Heading ---------------
	if (netTable->ContainsKey("VTestHdg"))
		VTestHdg = netTable->GetNumber("VTestHdg",VTestHdg);
	else
		netTable->PutNumber("VTestHdg",VTestHdg);

	// *************************************************************
	// ------------------- Get Pot for angle Data --------------------
	// *************************************************************

	// ------------ Pot Scale Value ---------------
	if (netTable->ContainsKey("PotScale"))
		kPotScale = netTable->GetNumber("PotScale",kPotScale);
	else
		netTable->PutNumber("PotScale",kPotScale);

	// ------------ Pot Offset Value ---------------
	if (netTable->ContainsKey("PotOffset"))
		kPotOffset = netTable->GetNumber("PotOffset",kPotOffset);
	else
		netTable->PutNumber("PotOffset",kPotOffset);


	// ------------------- Send Default Data to Vision System --------------
	Robot::visionSys->SetDisplayMode(kDefaultDisplayMode);
	Robot::visionSys->SetOffsets(shooterInchesXoffset, shooterInchesYoffset, TARGETHT);
	Robot::visionSys->SetCameraDefaults(imageWidth, imageHeight, imageFOV);
	Robot::visionSys->SetVisionTestDefaults( VTestFlag, VTestBall, VTestDist, VTestRun, VTestMaxX, VTestMinX, VTestMaxY, VTestMinY, VTestAngle, VTestHdg);

	// ------------------- Send Default Data to Lift System --------------
	Robot::liftSys->SetPotDefaults(kPotOffset, kPotScale);

	// ---------------- Initialize Gyro ----------------------------------
	Robot::drivetrain->GyroInit();
	Robot::drivetrain->GyroReset();

	// ----------------- Initialize Encoders ---------------------------
	Robot::drivetrain->ResetEncoders();
	Robot::liftSys->ResetEncoder();

	// ------------ Initialize Shooter speed ------------------------------
	Robot::shooterSys->SetShooterSpeed(Robot::shooterSys->kShootHiGoalSpeed);	// Set default shoot speed to high goal
}

START_ROBOT_CLASS(Robot);

