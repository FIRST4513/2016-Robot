// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef DRIVETRAIN_H
#define DRIVETRAIN_H
#include "Commands/Subsystem.h"
#include "WPILib.h"
//#include "../RobotMap.h"
//#include "../Commands/DriveByJoystickArcade.h"


/**
 *
 *
 * @author ExampleAuthor
 */
class Drivetrain: public Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<SpeedController> leftMtr;
	std::shared_ptr<SpeedController> rightMtr;
	std::shared_ptr<RobotDrive> robotDrive2;
	std::shared_ptr<Encoder> driveLeftEncoder;
	std::shared_ptr<Encoder> driveRightEncoder;
	std::shared_ptr<AnalogGyro> gyroA;
	std::shared_ptr<AnalogInput> maxSonar;
	std::shared_ptr<AnalogInput> proxSensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	const float SHOOTERSPEEDMOD=2;						//reserves memory for variable/attribute TWISTTHROTTLEMOD which is a constant
	const float SHOOTERTOPSWSPEED = 0.6;				// speed when drive by top hat switch

	const float TWISTTHROTTLEMOD=1.5;					//reserves memory for variable/attribute TWISTTHROTTLEMOD which is a constant
	const float XYDEADBAND=0.1;							//reserves memory for variable/attribute XYDEADBAND which is a constant
	float TWISTDEADBAND=0.025;							//reserves memory for variable/attribute TWISTDEADBAND which is a constant

	float throttle, yValue, twistValue, xValue;			// joystick working variable

	const float kEncoderConv = 0.0071428;				// Distance per pulse in inches 60inch 8584 lft, -8488 rt
	const float kEncoderConvPtTurn = 0.02978;			// avg degrees rotation per encoder cnt. Average lf & rt together
														// example 306 degrees rotation:10732 lft 9841 rt. avg 10286
	const float kMaxSonarConv = 22.0;					// Constant for Inches per volt value
	const float kProxSensorConv = 1.0;					// Conversion for inches per volt
	float proxValue;									// variable used in calculating distance

	// These gyro correction values may need to be tweaked based on floor type, Speed, Direction ???
	float kGyroCorrectionConstant = 0.018;				// 0.018 seemd good maybe lower than idel??
	float kGyroCorrectionLwrLimit = -0.070;				// -0.035 wasnt experienced at 0.005 correction
	float kGyroCorrectionUpperLimit = 0.070;
	float gyroLastHdg, gyroHdg, gyroDrift, origCorrection, correction;
	int firstTimeFlag;

public:
	Drivetrain();
	void InitDefaultCommand();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// --------------- Public Variables -----------------------------------------

	float currEncLft, beginEncLft, endEncLft;
	float currEncRt, beginEncRt, endEncRt;
	float currHdg, beginHdg, endHdg;

	float shooterAutoAimHdg;
	bool shooterAutoAimFlag;

	// ----------- Drive Methods -------------------

	void Drive(float speed, float turn);
	void TankDrive(double leftSpeed, double rightSpeed);				// Left & Right speed  -1 to +1
																		// Speed, Turn Radius  Values for both -1 to +1
	void DriveByJoystickArcade(std::shared_ptr<Joystick> joy);			// user 0=driver, 1=shooter
	void ShooterDriveByJoystickArcade(std::shared_ptr<Joystick> joy);	// user 0=driver, 1=shooter

	float GetHeading(int method);							// return The robots heading in degrees. 0=gyro, 1=encoder method

	void PutShooterAutoAimHdg(float hdg);
	float GetShooterAutoAimHdg();
	void PutShooterAutoAimFlag(bool flag);
	bool GetAutoAimFlag();

	void Stop();

	// ----------------- Gyro Methods ------------------------
	void GyroInit();
	void GyroReset();
	float GetHeadingByGyro();							// return The robots heading in degrees.
	void SetFirstTimeFlag(int val);				// Set or clear the first time flag for gyro correction
	void CalculateCorrection();					// Print gyroscope values

	// ------------------- Encoder Methods --------------------
	double GetLeftEncoder();
	double GetRightEncoder();
	void ResetEncoders();
	double GetDistance();						// return The distance driven (average of lf and rt encoders).

		// ------------------- Misc Methods ------------------------
	void ZeroBeginEndValues();
	void PostBeginValues();
	void PostEndValues();
	void PostCurrValues();
	void DisplaySmartdashValues();
	void DisplaySmartdashSimple();

	float GetDistanceBySonar();
	float GetSonarValue();
	float GetDistanceByProx();
	float GetProxValue();
};

#endif
