// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "VisionSys.h"
#include "../RobotMap.h"
#include "math.h"
#include "../Commands/ProccessVisionData.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

VisionSys::VisionSys() : Subsystem("VisionSys") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


	//camera = new AxisCamera("10.45.13.11");
	//camera->GetImage()

}

void VisionSys::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());

	SetDefaultCommand(new ProccessVisionData);

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

}


// ----------------------- Called from Robot.cpp on start up ---------------------
void VisionSys::SetCameraDefaults(float width, float height, float FOV){
	cameraSpec.imageWidth = width;
	cameraSpec.imageHeight = height;
	cameraSpec.imageFOV = FOV;
}

void VisionSys::SetOffsets(float x, float y, float ht){
	shooterInchesXoffset = x;
	shooterInchesYoffset = y;
	TARGETHT = ht;
}

void VisionSys::SetVisionTestDefaults(bool flag, bool ball, float dist, float run, float xmax, float xmin, float ymax, float ymin, float angle, float hdg){
	testData.VTestMinX = xmin;
	testData.VTestMinY = ymin;
	testData.VTestMaxX = xmax;
	testData.VTestMaxY = ymax;
	testData.VTestDist = dist;
	testData.VTestRun = run;
	testData.VTestBall = ball;
	testData.VTestFlag = flag;
	testData.VTestAngle = angle;
	testData.VTestHdg = hdg;
}

// ------ Camera Image Capture --------------------------------------

void CameraTest(){
	//std::string *phost;
	//std::string const host = "10.45.13.8";

	////phost = &host;
	//ColorImage *image;


	//AxisCamera camera = AxisCamera(&host);

	//AxisCamera camera = AxisCamera(static_cast <std::string> (new "10.8.8.8"));
	//int retval = camera.GetImage(image);

}


// ------------------------ Called from ProccessVisionDataCmd.cpp ----------------

VisionSys::ImageSpec VisionSys::GetCameraSpecs(){
	return cameraSpec;
}

float VisionSys::GetImageWidth(){
	return cameraSpec.imageWidth;
}

float VisionSys::GetImageHeight(){
	return cameraSpec.imageHeight;
}

float VisionSys::GetImageFOV(){
	return cameraSpec.imageFOV;
}



bool VisionSys::GetTestFlag(){
	return testData.VTestFlag;
}
bool VisionSys::GetTestBall(){
	return testData.VTestBall;
}
float VisionSys::GetTestMinX(){
	return testData.VTestMinX;
}
float VisionSys::GetTestMinY(){
	return testData.VTestMinY;
}
float VisionSys::GetTestMaxX(){
	return testData.VTestMaxX;
}
float VisionSys::GetTestMaxY(){
	return testData.VTestMaxY;
}
float VisionSys::GetTestDist(){
	return testData.VTestDist;
}
float VisionSys::GetTestRun(){
	return testData.VTestRun;
}
float VisionSys::GetTestAngle(){
	return testData.VTestAngle;
}
float VisionSys::GetTestHdg(){
	return testData.VTestHdg;
}


float VisionSys::GetImageshooterInchesXoffset(){
	return shooterInchesXoffset;
}

float VisionSys::GetImageshooterInchesYoffset(){
	return shooterInchesYoffset;
}

float VisionSys::GetTARGETHT(){
	return TARGETHT;
}

int VisionSys::GetDisplayMode(){
	return displayMode;

}
void VisionSys::SetDisplayMode(int mode){
	displayMode = mode;
	if (displayMode == 0) SmartDashboard::PutString("Display Mode", "0-None");
	if (displayMode == 1) SmartDashboard::PutString("Display Mode", "1-Visual");
	if (displayMode == 2) SmartDashboard::PutString("Display Mode", "2-Proximity");

}

void VisionSys::ToggleDisplayMode(){
	if (displayMode > 0)			// loop from 0 to 1 to 2 not ready yet
		displayMode = 0;
	else
		displayMode++;

	if (displayMode == 0) SmartDashboard::PutString("Display Mode", "0-None");
	if (displayMode == 1) SmartDashboard::PutString("Display Mode", "1-Visual");
	if (displayMode == 2) SmartDashboard::PutString("Display Mode", "2-Proximity");
	}
