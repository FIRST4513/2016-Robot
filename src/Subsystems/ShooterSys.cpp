// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "ShooterSys.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

ShooterSys::ShooterSys() : Subsystem("ShooterSys") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    shooterFrontMtr = RobotMap::shooterSysShooterFrontMtr;
    shooterRearMtr = RobotMap::shooterSysShooterRearMtr;
    shooterContactSw = RobotMap::shooterSysShooterContactSw;
    captureLeftSpike = RobotMap::shooterSysCaptureLeftSpike;
    captureRightSpike = RobotMap::shooterSysCaptureRightSpike;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void ShooterSys::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetShooterSpeed(kShootHiGoalSpeed);
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

// --------------- Manually Drive Motors ----------------
void ShooterSys::DriveFrontMtr(float speed){
	shooterFrontMtr->Set(speed);
}
void ShooterSys::DriveRearMtr(float speed){
	shooterRearMtr->Set(speed);
}

// ----------------------- Stop Motors ---------------------
void ShooterSys::StopMtrs(){
	shooterFrontMtr->Set(0);
	shooterRearMtr->Set(0);
	CaptureMotorsStop();
	SetSpeedFlag(false);
}
void ShooterSys::StopFrontMtr(){
	shooterFrontMtr->Set(0);
	SetSpeedFlag(false);
}

void ShooterSys::StopRearMtr(){
	shooterRearMtr->Set(0);
}

// ------------------- Capture & Hold Speeds ----------------------------------------------------------
void ShooterSys::HoldBall(){			// Front Motor Stop, Back Motor Hold speed
	shooterFrontMtr->Set(0);
	SetSpeedFlag(false);
	shooterRearMtr->Set(kHoldBallSpeed);
}
void ShooterSys::CaptureBall(){			// Front & Back motor at retract speed or rear motor at hold speed ??
	shooterFrontMtr->Set(kRetractBallFrontMtrSpeed);
	shooterRearMtr->Set(kRetractBallRearMtrSpeed);
	SetSpeedFlag(false);
}

// ------------------- Capture Motor Methods ----------------------------------------------------------

void ShooterSys::CaptureMotorsRetract(){
	captureLeftSpike->Set(captureLeftSpike->kForward);
	captureLeftSpike->Set(captureLeftSpike->kReverse);
}

void ShooterSys::CaptureMotorsStop(){
	captureLeftSpike->Set(captureLeftSpike->kOff);
	captureLeftSpike->Set(captureLeftSpike->kOff);
}

// ---------------------- SpinUp Front Motor --------------------------
void ShooterSys::SpinUpLowGoal(){		// Front motor at Low goal speed
	shooterFrontMtr->Set(kShootLowGoalSpeed);
}

void ShooterSys::SpinUpHighGoal(){		// Front motor at High goal speed
	shooterFrontMtr->Set(kShootHiGoalSpeed);
//	SmartDashboard::PutNumber("HiSpeedSet At=", kShootHiGoalSpeed);
}

// ------------------------ Set & Get Shooter Speed ----------------------
void ShooterSys::SetShooterSpeed(float speed){
	shooterSpeed = speed;
}

float ShooterSys::GetShooterSpeed(){
		return shooterSpeed;
}

void ShooterSys::SetSpeedFlag(bool value){
	speedFlag = value;
}

bool ShooterSys::GetSpeedFlag(){
	return speedFlag;
}

// ---------------- Limit Switch Methods --------------------------

bool ShooterSys::GetRearContactLmtSw(){
	if (shooterContactSw->Get() == LIMITSWITCHPRESSED) return true;
	return false;
}
// --------------------------------------------------------------------
void ShooterSys::DisplaySmartdashValues(){
	if (shooterContactSw->Get() == LIMITSWITCHPRESSED)
		SmartDashboard::PutString("Contact Sw", "Pressed");
	else
		SmartDashboard::PutString("Contact Sw", "NOT Pressed");
}
