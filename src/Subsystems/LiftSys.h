// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef LIFTSYS_H
#define LIFTSYS_H
#include "Commands/Subsystem.h"
#include "WPILib.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class LiftSys: public Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<SpeedController> liftMtr;
	std::shared_ptr<Encoder> liftEncoder;
	std::shared_ptr<DigitalInput> liftUpLmtSw;
	std::shared_ptr<DigitalInput> liftLoLmtSw;
	std::shared_ptr<AnalogInput> liftPot;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// ------- Constants ------------------
	const float XYDEADBAND=0.1;						//reserves memory for variable/attribute XYDEADBAND which is a constant
	const float ACCELZEROPT = 1.563;				// Point where accell is at zero degrees (horizontal)
	const float AccelScale = 0.31;					// The accelerometer is 3G device
	const float DEGREETORADIANCONST = 0.0174533;	// Degrees * Constant = Radians
	const float RADIANSTODEGREECONST = 57.295791;	// Constant / Radians = Degrees
	const float AnglePotConv = 1.0;					// Convert pot value to angle

	float tempAngle;


	float throttle, yValue;							// joystick working variable

	// ---------- Internal Variables --------------------------------
	float lpImageCurrXpos, lpImageCurrYpos;
	float servoCurrentXoffsetAngle, servoCurrentYoffsetAngle;
	float xAngle, yAngle, xPos, yPos;
	float imageXpos, imageYpos;

	// --------------- Encoder to Angle Table -----------------------
	int EncTblSize = 12;
	int EncCntTbl[12] = { 0,7110,12519,16793, 22628, 30349, 35785, 41092, 47560, 54179, 55322, 62893 };
	float AngleTbl[12] =  { -2.7, 3.8, 9.1, 13.4, 19.25, 26.75, 30.8, 36.6, 42.9, 48.8, 49.7, 55};

//	int EncTblSize = 13;
//	int EncCntTbl[13] = { 0,2964, 6375, 13049, 21588, 25956, 32913, 38796, 40445, 45748, 47619, 53342, 58791 };
//	float AngleTbl[13] =  { -1.0, 0.5, 3.2, 9.9, 18.35, 22.65, 29.35, 34.75, 38.25, 41.25, 44.9, 48.1, 52.65};

	int TblIndex;


	// -------------------- Network Table Pointer -------------------
	std::shared_ptr<NetworkTable> netTable;
	std::vector<std::string> keys;


public:

	// --------------- Public Variables -----------------------------------------

	float currEnc, beginEnc, endEnc;
	float currEncAngle, beginEncAngle, endEncAngle;

	int currLoLmtSw, currHiLmtSw;

	// ----------------------------------------------------
	const bool LIMITSWITCHPRESSED = true;
	float kLiftSpeedFast = 0.6;
	float kLiftSpeedMed = 0.45;
	float kLiftSpeedSlow = 0.3;
	float kLiftSpeedTopHatSw = 0.6;				// Speed of lift when driven by the top switch on joystick
	float kDefaultLiftSpeed = 0.45;				// standard lift speed
	float kLiftAngleConversionFactor = 0.1;		// UPDATE THIS VALUE AFTER TESTING
	float kPotScale, kPotOffset;				// These are set by Robot.cpp on startup

	float shooterAutoAimAngle;
	bool shooterAutoAimFlag;

	LiftSys();
	void InitDefaultCommand();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// --------------- Motor Control -----------------
	void DriveLiftMtr(float speed);								// manually drive Lift motor
	void LiftByJoystick(std::shared_ptr<Joystick> joy);			// Drive Lift motor by Joystick
	void LiftByTopSw(std::shared_ptr<Joystick> joy);
	void LiftMtrStop();											// Stop Lift Motor


	float GetLiftAngle(int method);								// method:  0 -> by accel   1-> by encoder

	// ---------------- Limit Switch Methods ---------------
	bool GetLowerLmtSw();
	bool GetUpperLmtSw();

	// -------- Encoder Methods ---------------
	float GetLiftAngleByEncoder();
	double GetLiftEncoder();
	void ResetEncoder();
	float ConvertLiftAngleToEncoder(float angle);
	float ConvertLiftEncoderToAngle(float encoder);


	// -------- Pot Methods ---------------
	void SetPotDefaults(float kPotOffset, float kPotScale);
	float GetLiftAngleByPot();
	float GetLiftPotValue();


	// ------------------- Misc Methods ------------------------
	void ZeroBeginEndValues();
	void PostBeginValues();
	void PostEndValues();
	void PostCurrValues();

	void PutShooterAngle(float angle);
	float GetShooterAngle();
	void PutShooterAutoAimFlag(bool flag);
	bool GetAutoAimFlag();
	void DisplaySmartdashValues();
	void DisplaySmartdashSimple();
};

#endif
