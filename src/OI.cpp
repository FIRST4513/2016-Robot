// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutoAimCmdGrp.h"
#include "Commands/AutoDoNothingCmd.h"
#include "Commands/AutoFireHighGrp.h"
#include "Commands/AutoFireLowGrp.h"
#include "Commands/AutoFwd5Cmd.h"
#include "Commands/AutoLiftToShootCmdGrp.h"
#include "Commands/AutoSetupShootHighGoalCmdGrp.h"
#include "Commands/AutoShootHighGoalCmdGrp.h"
#include "Commands/AutoShootLowGoalCmdGrp.h"
#include "Commands/AutoSwTurn45Cmd.h"
#include "Commands/AutoThroughDefenseCmdGrp.h"
#include "Commands/AutoToDefenseCmdGrp.h"
#include "Commands/AutoTurnN45Cmd.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/DelayCmd.h"
#include "Commands/DriveByJoystickArcade.h"
#include "Commands/DrivePointTurnCmd.h"
#include "Commands/DriveStop.h"
#include "Commands/DriveStraightCmd.h"
#include "Commands/DriveTurnCmd.h"
#include "Commands/DriverLiftByJoystickCmd.h"
#include "Commands/DriverLiftStopCmd.h"
#include "Commands/LEDRingOffCmdGrp.h"
#include "Commands/LEDRingOnCmdGrp.h"
#include "Commands/LiftByJoystick.h"
#include "Commands/LiftStopCmd.h"
#include "Commands/LiftTo10CmdGrp.h"
#include "Commands/LiftTo25CmdGrp.h"
#include "Commands/LiftTo45CmdGrp.h"
#include "Commands/LiftToAngleCmd.h"
#include "Commands/LiftToBottmCmd.h"
#include "Commands/LiftToTop.h"
#include "Commands/ProccessVisionData.h"
#include "Commands/ResetHdgEncCmd.h"
#include "Commands/RobotLightsOffCmd.h"
#include "Commands/RobotLightsOnCmd.h"
#include "Commands/ShooterBriveByJoystickCmdGrp.h"
#include "Commands/ShooterDribeByJoystickCmd.h"
#include "Commands/ShooterFireCmdGrp.h"
#include "Commands/ShooterHoldBallCmd.h"
#include "Commands/ShooterPushBallFwdCmd.h"
#include "Commands/ShooterRetractAndHoldBallCmd.h"
#include "Commands/ShooterSetTargetSpeedCmd.h"
#include "Commands/ShooterSpinUpCmd.h"
#include "Commands/ShooterStopCmd.h"
#include "Commands/StartDefaultCmdGrp.h"
#include "Commands/UpdateSmartdashboard.h"
#include "Commands/VisionLEDCmd.h"
#include "Commands/VisionLaserCmd.h"
#include "Commands/VisionOffsetsResetCmd.h"
#include "Commands/VisionToggleDispCmd.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    shooterJoystick.reset(new Joystick(1));
    
    liftStopBtn2.reset(new JoystickButton(shooterJoystick.get(), 12));
    liftStopBtn2->WhenPressed(new LiftStopCmd());
    liftByJoystickBtn2.reset(new JoystickButton(shooterJoystick.get(), 11));
    liftByJoystickBtn2->WhileHeld(new LiftByJoystick());
    autoAimBtn.reset(new JoystickButton(shooterJoystick.get(), 8));
    autoAimBtn->WhenPressed(new AutoAimCmdGrp());
    autoFireBtn.reset(new JoystickButton(shooterJoystick.get(), 7));
    autoFireBtn->WhenPressed(new AutoFireHighGrp());
    toggleDisplayBtn.reset(new JoystickButton(shooterJoystick.get(), 6));
    toggleDisplayBtn->WhenPressed(new VisionToggleDispCmd());
    ledOffBTN.reset(new JoystickButton(shooterJoystick.get(), 10));
    ledOffBTN->WhenPressed(new VisionLEDCmd(false));
    ledOnBtn.reset(new JoystickButton(shooterJoystick.get(), 9));
    ledOnBtn->WhenPressed(new VisionLEDCmd(true));
    shooterStopMotorsBtn.reset(new JoystickButton(shooterJoystick.get(), 12));
    shooterStopMotorsBtn->WhenPressed(new ShooterStopCmd());
    shooterSpinUpBtn.reset(new JoystickButton(shooterJoystick.get(), 5));
    shooterSpinUpBtn->WhenPressed(new ShooterSpinUpCmd());
    shooterFireHighGoalBtn.reset(new JoystickButton(shooterJoystick.get(), 4));
    shooterFireHighGoalBtn->WhenPressed(new ShooterPushBallFwdCmd(0));
    shooterFireLowGoalBtn.reset(new JoystickButton(shooterJoystick.get(), 3));
    shooterFireLowGoalBtn->WhenPressed(new ShooterPushBallFwdCmd(1));
    shooterRetractionBtn.reset(new JoystickButton(shooterJoystick.get(), 2));
    shooterRetractionBtn->WhenPressed(new ShooterRetractAndHoldBallCmd());
    liftStopBtn.reset(new JoystickButton(shooterJoystick.get(), 1));
    liftStopBtn->WhenReleased(new LiftStopCmd());
    liftDriveStopBtn.reset(new JoystickButton(shooterJoystick.get(), 1));
    liftDriveStopBtn->WhenReleased(new DriveStop());
    liftByJoystickBtn.reset(new JoystickButton(shooterJoystick.get(), 1));
    liftByJoystickBtn->WhileHeld(new ShooterBriveByJoystickCmdGrp());
    shooterStartDefaultBtn.reset(new JoystickButton(shooterJoystick.get(), 1));
    shooterStartDefaultBtn->WhenPressed(new StartDefaultCmdGrp());
    driverJoystick.reset(new Joystick(0));
    
    liftTo10Btn.reset(new JoystickButton(driverJoystick.get(), 4));
    liftTo10Btn->WhenPressed(new LiftTo10CmdGrp());
    driverLiftStopBtn.reset(new JoystickButton(driverJoystick.get(), 11));
    driverLiftStopBtn->WhenReleased(new DriverLiftStopCmd());
    driverLiftByJoystickBtn.reset(new JoystickButton(driverJoystick.get(), 11));
    driverLiftByJoystickBtn->WhileHeld(new DriverLiftByJoystickCmd());
    resetHdgEncBtn.reset(new JoystickButton(driverJoystick.get(), 9));
    resetHdgEncBtn->WhenPressed(new ResetHdgEncCmd());
    shooterOffBtn.reset(new JoystickButton(driverJoystick.get(), 7));
    shooterOffBtn->WhenPressed(new ShooterStopCmd());
    liftToTopBtn.reset(new JoystickButton(driverJoystick.get(), 5));
    liftToTopBtn->WhenPressed(new LiftToTop());
    liftToBottomBth.reset(new JoystickButton(driverJoystick.get(), 3));
    liftToBottomBth->WhenPressed(new LiftToBottmCmd());
    retractAndHoldBallBtn.reset(new JoystickButton(driverJoystick.get(), 2));
    retractAndHoldBallBtn->WhenPressed(new ShooterRetractAndHoldBallCmd());
    driveStopBtn.reset(new JoystickButton(driverJoystick.get(), 1));
    driveStopBtn->WhenReleased(new DriveStop());
    startDefaultCmdBtn.reset(new JoystickButton(driverJoystick.get(), 1));
    startDefaultCmdBtn->WhenPressed(new StartDefaultCmdGrp());
    driveByJostickBtn.reset(new JoystickButton(driverJoystick.get(), 1));
    driveByJostickBtn->WhileHeld(new DriveByJoystickArcade());

    // SmartDashboard Buttons
    SmartDashboard::PutData("ProccessVisionData", new ProccessVisionData());
    SmartDashboard::PutData("UpdateSmartdashboard", new UpdateSmartdashboard());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<Joystick> OI::getDriverJoystick() {
   return driverJoystick;
}

std::shared_ptr<Joystick> OI::getShooterJoystick() {
   return shooterJoystick;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
